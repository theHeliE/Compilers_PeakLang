Terminals unused in grammar

    '?'
    '='


Grammar

    0 $accept: mainProgram $end

    1 mainProgram: program
    2            | error

    3 program: external_declaration
    4        | program external_declaration

    5 external_declaration: function_definition
    6                     | variable_definition
    7                     | compound_statement

    8 variable_definition: type_specifier identifier_list ';'
    9                    | type_specifier identifier_list ASSIGNMENT expression ';'
   10                    | THABET type_specifier identifier_list ASSIGNMENT expression ';'

   11 identifier_list: IDENTIFIER
   12                | identifier_list ',' IDENTIFIER

   13 type_specifier: INT
   14               | FLOAT
   15               | CHAR
   16               | VOID
   17               | BOOL

   18 expression: assignment_expression
   19           | expression ',' assignment_expression

   20 $@1: ε

   21 function_definition: type_specifier IDENTIFIER '(' ENTER_SCOPE parameters LEAVE_SCOPE $@1 ')' compound_statement

   22 parameters: parameter_list
   23           | ε

   24 parameter_list: parameter_declaration
   25               | parameter_list ',' parameter_declaration

   26 parameter_declaration: type_specifier IDENTIFIER

   27 compound_statement: '{' ENTER_SCOPE_SEMANTIC ENTER_SCOPE scope LEAVE_SCOPE LEAVE_SCOPE_SEMANTIC '}'
   28                   | '{' '}'

   29 scope: scope_item
   30      | scope scope_item

   31 scope_item: variable_definition
   32           | statement
   33           | function_definition

   34 expression_statement: ';'
   35                     | expression ';'

   36 statement: expression_statement
   37          | compound_statement
   38          | selection_statement
   39          | loop_statement
   40          | jump_statement

   41 selection_statement: IF '(' expression ')' compound_statement
   42                    | IF '(' expression ')' compound_statement ELSE compound_statement
   43                    | SWITCH '(' ENTER_SCOPE expression LEAVE_SCOPE ')' '{' case_list '}'

   44 case_list: ENTER_SCOPE case_item LEAVE_SCOPE
   45          | case_list ENTER_SCOPE case_item LEAVE_SCOPE

   46 case_item: CASE CONSTANT ':' compound_statement
   47          | DEFAULT ':' compound_statement

   48 loop_statement: WHILE '(' ENTER_SCOPE expression LEAVE_SCOPE ')' compound_statement
   49               | DO compound_statement WHILE '(' ENTER_SCOPE expression LEAVE_SCOPE ')' ';'
   50               | FOR '(' variable_definition expression_statement ENTER_SCOPE expression LEAVE_SCOPE ')' compound_statement

   51 jump_statement: GOTO IDENTIFIER ';'
   52               | CONTINUE ';'
   53               | BREAK ';'
   54               | RETURN ';'
   55               | RETURN expression ';'

   56 assignment_expression: logical_or_expression
   57                      | IDENTIFIER ASSIGNMENT assignment_expression
   58                      | IDENTIFIER '(' ENTER_SCOPE arguments LEAVE_SCOPE ')'

   59 arguments: primary_expression
   60          | arguments ',' primary_expression
   61          | ε

   62 logical_or_expression: logical_and_expression
   63                      | logical_or_expression OR_OP logical_and_expression

   64 logical_and_expression: inclusive_or_expression
   65                       | logical_and_expression AND_OP inclusive_or_expression

   66 inclusive_or_expression: exclusive_or_expression
   67                        | inclusive_or_expression '|' exclusive_or_expression

   68 exclusive_or_expression: and_expression
   69                        | exclusive_or_expression '^' and_expression

   70 and_expression: equality_expression
   71               | and_expression '&' equality_expression

   72 equality_expression: relational_expression
   73                    | equality_expression EQ_OP relational_expression
   74                    | equality_expression NE_OP relational_expression

   75 relational_expression: shift_expression
   76                      | relational_expression L_OP shift_expression
   77                      | relational_expression G_OP shift_expression
   78                      | relational_expression LE_OP shift_expression
   79                      | relational_expression GE_OP shift_expression

   80 shift_expression: additive_expression
   81                 | shift_expression LEFT_OP additive_expression
   82                 | shift_expression RIGHT_OP additive_expression

   83 additive_expression: multiplicative_expression
   84                    | additive_expression '+' multiplicative_expression
   85                    | additive_expression '-' multiplicative_expression

   86 multiplicative_expression: unary_expression
   87                          | multiplicative_expression '*' unary_expression
   88                          | multiplicative_expression '/' unary_expression
   89                          | multiplicative_expression '%' unary_expression

   90 unary_expression: primary_expression
   91                 | '-' unary_expression
   92                 | '+' unary_expression
   93                 | '!' unary_expression
   94                 | '~' unary_expression

   95 primary_expression: IDENTIFIER
   96                   | CONSTANT
   97                   | TRUE
   98                   | FALSE
   99                   | '(' expression ')'

  100 ENTER_SCOPE: ε

  101 ENTER_SCOPE_SEMANTIC: ε

  102 LEAVE_SCOPE: ε

  103 LEAVE_SCOPE_SEMANTIC: ε


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 93
    '%' (37) 89
    '&' (38) 71
    '(' (40) 21 41 42 43 48 49 50 58 99
    ')' (41) 21 41 42 43 48 49 50 58 99
    '*' (42) 87
    '+' (43) 84 92
    ',' (44) 12 19 25 60
    '-' (45) 85 91
    '/' (47) 88
    ':' (58) 46 47
    ';' (59) 8 9 10 34 35 49 51 52 53 54 55
    '=' (61)
    '?' (63)
    '^' (94) 69
    '{' (123) 27 28 43
    '|' (124) 67
    '}' (125) 27 28 43
    '~' (126) 94
    error (256) 2
    IDENTIFIER <val> (258) 11 12 21 26 51 57 58 95
    CONSTANT <val> (259) 46 96
    INT <val> (260) 13
    FLOAT <val> (261) 14
    CHAR <val> (262) 15
    VOID <val> (263) 16
    BOOL <val> (264) 17
    TRUE <val> (265) 97
    FALSE <val> (266) 98
    CASE <val> (267) 46
    DEFAULT <val> (268) 47
    IF <val> (269) 41 42
    ELSE <val> (270) 42
    SWITCH <val> (271) 43
    WHILE <val> (272) 48 49
    DO <val> (273) 49
    FOR <val> (274) 50
    GOTO <val> (275) 51
    CONTINUE <val> (276) 52
    BREAK <val> (277) 53
    RETURN <val> (278) 54 55
    THABET <val> (279) 10
    ASSIGNMENT <val> (280) 9 10 57
    AND_OP (281) 65
    OR_OP (282) 63
    EQ_OP (283) 73
    NE_OP (284) 74
    LE_OP (285) 78
    GE_OP (286) 79
    LEFT_OP (287) 81
    RIGHT_OP (288) 82
    L_OP (289) 76
    G_OP (290) 77
    UMINUS (291)
    UPLUS (292)
    LOWER_THAN_ELSE (293)


Nonterminals, with rules where they appear

    $accept (58)
        on left: 0
    mainProgram (59)
        on left: 1 2
        on right: 0
    program (60)
        on left: 3 4
        on right: 1 4
    external_declaration (61)
        on left: 5 6 7
        on right: 3 4
    variable_definition (62)
        on left: 8 9 10
        on right: 6 31 50
    identifier_list <val> (63)
        on left: 11 12
        on right: 8 9 10 12
    type_specifier <val> (64)
        on left: 13 14 15 16 17
        on right: 8 9 10 21 26
    expression <val> (65)
        on left: 18 19
        on right: 9 10 19 35 41 42 43 48 49 50 55 99
    function_definition (66)
        on left: 21
        on right: 5 33
    $@1 (67)
        on left: 20
        on right: 21
    parameters <parameterList> (68)
        on left: 22 23
        on right: 21
    parameter_list <parameterList> (69)
        on left: 24 25
        on right: 22 25
    parameter_declaration <parameterDeclaration> (70)
        on left: 26
        on right: 24 25
    compound_statement <ptr> (71)
        on left: 27 28
        on right: 7 21 37 41 42 46 47 48 49 50
    scope (72)
        on left: 29 30
        on right: 27 30
    scope_item (73)
        on left: 31 32 33
        on right: 29 30
    expression_statement <val> (74)
        on left: 34 35
        on right: 36 50
    statement (75)
        on left: 36 37 38 39 40
        on right: 32
    selection_statement <val> (76)
        on left: 41 42 43
        on right: 38
    case_list <ptr> (77)
        on left: 44 45
        on right: 43 45
    case_item <val> (78)
        on left: 46 47
        on right: 44 45
    loop_statement <val> (79)
        on left: 48 49 50
        on right: 39
    jump_statement (80)
        on left: 51 52 53 54 55
        on right: 40
    assignment_expression <val> (81)
        on left: 56 57 58
        on right: 18 19 57
    arguments (82)
        on left: 59 60 61
        on right: 58 60
    logical_or_expression <val> (83)
        on left: 62 63
        on right: 56 63
    logical_and_expression <val> (84)
        on left: 64 65
        on right: 62 63 65
    inclusive_or_expression <val> (85)
        on left: 66 67
        on right: 64 65 67
    exclusive_or_expression <val> (86)
        on left: 68 69
        on right: 66 67 69
    and_expression <val> (87)
        on left: 70 71
        on right: 68 69 71
    equality_expression <val> (88)
        on left: 72 73 74
        on right: 70 71 73 74
    relational_expression <val> (89)
        on left: 75 76 77 78 79
        on right: 72 73 74 76 77 78 79
    shift_expression <val> (90)
        on left: 80 81 82
        on right: 75 76 77 78 79 81 82
    additive_expression <val> (91)
        on left: 83 84 85
        on right: 80 81 82 84 85
    multiplicative_expression <val> (92)
        on left: 86 87 88 89
        on right: 83 84 85 87 88 89
    unary_expression <val> (93)
        on left: 90 91 92 93 94
        on right: 86 87 88 89 91 92 93 94
    primary_expression <val> (94)
        on left: 95 96 97 98 99
        on right: 59 60 90
    ENTER_SCOPE (95)
        on left: 100
        on right: 21 27 43 44 45 48 49 50 58
    ENTER_SCOPE_SEMANTIC (96)
        on left: 101
        on right: 27
    LEAVE_SCOPE <ptr> (97)
        on left: 102
        on right: 21 27 43 44 45 48 49 50 58
    LEAVE_SCOPE_SEMANTIC (98)
        on left: 103
        on right: 27


State 0

    0 $accept: • mainProgram $end

    error   shift, and go to state 1
    INT     shift, and go to state 2
    FLOAT   shift, and go to state 3
    CHAR    shift, and go to state 4
    VOID    shift, and go to state 5
    BOOL    shift, and go to state 6
    THABET  shift, and go to state 7
    '{'     shift, and go to state 8

    mainProgram           go to state 9
    program               go to state 10
    external_declaration  go to state 11
    variable_definition   go to state 12
    type_specifier        go to state 13
    function_definition   go to state 14
    compound_statement    go to state 15


State 1

    2 mainProgram: error •

    $default  reduce using rule 2 (mainProgram)


State 2

   13 type_specifier: INT •

    $default  reduce using rule 13 (type_specifier)


State 3

   14 type_specifier: FLOAT •

    $default  reduce using rule 14 (type_specifier)


State 4

   15 type_specifier: CHAR •

    $default  reduce using rule 15 (type_specifier)


State 5

   16 type_specifier: VOID •

    $default  reduce using rule 16 (type_specifier)


State 6

   17 type_specifier: BOOL •

    $default  reduce using rule 17 (type_specifier)


State 7

   10 variable_definition: THABET • type_specifier identifier_list ASSIGNMENT expression ';'

    INT    shift, and go to state 2
    FLOAT  shift, and go to state 3
    CHAR   shift, and go to state 4
    VOID   shift, and go to state 5
    BOOL   shift, and go to state 6

    type_specifier  go to state 16


State 8

   27 compound_statement: '{' • ENTER_SCOPE_SEMANTIC ENTER_SCOPE scope LEAVE_SCOPE LEAVE_SCOPE_SEMANTIC '}'
   28                   | '{' • '}'

    '}'  shift, and go to state 17

    $default  reduce using rule 101 (ENTER_SCOPE_SEMANTIC)

    ENTER_SCOPE_SEMANTIC  go to state 18


State 9

    0 $accept: mainProgram • $end

    $end  shift, and go to state 19


State 10

    1 mainProgram: program •
    4 program: program • external_declaration

    INT     shift, and go to state 2
    FLOAT   shift, and go to state 3
    CHAR    shift, and go to state 4
    VOID    shift, and go to state 5
    BOOL    shift, and go to state 6
    THABET  shift, and go to state 7
    '{'     shift, and go to state 8

    $default  reduce using rule 1 (mainProgram)

    external_declaration  go to state 20
    variable_definition   go to state 12
    type_specifier        go to state 13
    function_definition   go to state 14
    compound_statement    go to state 15


State 11

    3 program: external_declaration •

    $default  reduce using rule 3 (program)


State 12

    6 external_declaration: variable_definition •

    $default  reduce using rule 6 (external_declaration)


State 13

    8 variable_definition: type_specifier • identifier_list ';'
    9                    | type_specifier • identifier_list ASSIGNMENT expression ';'
   21 function_definition: type_specifier • IDENTIFIER '(' ENTER_SCOPE parameters LEAVE_SCOPE $@1 ')' compound_statement

    IDENTIFIER  shift, and go to state 21

    identifier_list  go to state 22


State 14

    5 external_declaration: function_definition •

    $default  reduce using rule 5 (external_declaration)


State 15

    7 external_declaration: compound_statement •

    $default  reduce using rule 7 (external_declaration)


State 16

   10 variable_definition: THABET type_specifier • identifier_list ASSIGNMENT expression ';'

    IDENTIFIER  shift, and go to state 23

    identifier_list  go to state 24


State 17

   28 compound_statement: '{' '}' •

    $default  reduce using rule 28 (compound_statement)


State 18

   27 compound_statement: '{' ENTER_SCOPE_SEMANTIC • ENTER_SCOPE scope LEAVE_SCOPE LEAVE_SCOPE_SEMANTIC '}'

    $default  reduce using rule 100 (ENTER_SCOPE)

    ENTER_SCOPE  go to state 25


State 19

    0 $accept: mainProgram $end •

    $default  accept


State 20

    4 program: program external_declaration •

    $default  reduce using rule 4 (program)


State 21

   11 identifier_list: IDENTIFIER •
   21 function_definition: type_specifier IDENTIFIER • '(' ENTER_SCOPE parameters LEAVE_SCOPE $@1 ')' compound_statement

    '('  shift, and go to state 26

    $default  reduce using rule 11 (identifier_list)


State 22

    8 variable_definition: type_specifier identifier_list • ';'
    9                    | type_specifier identifier_list • ASSIGNMENT expression ';'
   12 identifier_list: identifier_list • ',' IDENTIFIER

    ASSIGNMENT  shift, and go to state 27
    ';'         shift, and go to state 28
    ','         shift, and go to state 29


State 23

   11 identifier_list: IDENTIFIER •

    $default  reduce using rule 11 (identifier_list)


State 24

   10 variable_definition: THABET type_specifier identifier_list • ASSIGNMENT expression ';'
   12 identifier_list: identifier_list • ',' IDENTIFIER

    ASSIGNMENT  shift, and go to state 30
    ','         shift, and go to state 29


State 25

   27 compound_statement: '{' ENTER_SCOPE_SEMANTIC ENTER_SCOPE • scope LEAVE_SCOPE LEAVE_SCOPE_SEMANTIC '}'

    IDENTIFIER  shift, and go to state 31
    CONSTANT    shift, and go to state 32
    INT         shift, and go to state 2
    FLOAT       shift, and go to state 3
    CHAR        shift, and go to state 4
    VOID        shift, and go to state 5
    BOOL        shift, and go to state 6
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    IF          shift, and go to state 35
    SWITCH      shift, and go to state 36
    WHILE       shift, and go to state 37
    DO          shift, and go to state 38
    FOR         shift, and go to state 39
    GOTO        shift, and go to state 40
    CONTINUE    shift, and go to state 41
    BREAK       shift, and go to state 42
    RETURN      shift, and go to state 43
    THABET      shift, and go to state 7
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    ';'         shift, and go to state 48
    '('         shift, and go to state 49
    '{'         shift, and go to state 8

    variable_definition        go to state 50
    type_specifier             go to state 13
    expression                 go to state 51
    function_definition        go to state 52
    compound_statement         go to state 53
    scope                      go to state 54
    scope_item                 go to state 55
    expression_statement       go to state 56
    statement                  go to state 57
    selection_statement        go to state 58
    loop_statement             go to state 59
    jump_statement             go to state 60
    assignment_expression      go to state 61
    logical_or_expression      go to state 62
    logical_and_expression     go to state 63
    inclusive_or_expression    go to state 64
    exclusive_or_expression    go to state 65
    and_expression             go to state 66
    equality_expression        go to state 67
    relational_expression      go to state 68
    shift_expression           go to state 69
    additive_expression        go to state 70
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73


State 26

   21 function_definition: type_specifier IDENTIFIER '(' • ENTER_SCOPE parameters LEAVE_SCOPE $@1 ')' compound_statement

    $default  reduce using rule 100 (ENTER_SCOPE)

    ENTER_SCOPE  go to state 74


State 27

    9 variable_definition: type_specifier identifier_list ASSIGNMENT • expression ';'

    IDENTIFIER  shift, and go to state 31
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    expression                 go to state 75
    assignment_expression      go to state 61
    logical_or_expression      go to state 62
    logical_and_expression     go to state 63
    inclusive_or_expression    go to state 64
    exclusive_or_expression    go to state 65
    and_expression             go to state 66
    equality_expression        go to state 67
    relational_expression      go to state 68
    shift_expression           go to state 69
    additive_expression        go to state 70
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73


State 28

    8 variable_definition: type_specifier identifier_list ';' •

    $default  reduce using rule 8 (variable_definition)


State 29

   12 identifier_list: identifier_list ',' • IDENTIFIER

    IDENTIFIER  shift, and go to state 76


State 30

   10 variable_definition: THABET type_specifier identifier_list ASSIGNMENT • expression ';'

    IDENTIFIER  shift, and go to state 31
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    expression                 go to state 77
    assignment_expression      go to state 61
    logical_or_expression      go to state 62
    logical_and_expression     go to state 63
    inclusive_or_expression    go to state 64
    exclusive_or_expression    go to state 65
    and_expression             go to state 66
    equality_expression        go to state 67
    relational_expression      go to state 68
    shift_expression           go to state 69
    additive_expression        go to state 70
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73


State 31

   57 assignment_expression: IDENTIFIER • ASSIGNMENT assignment_expression
   58                      | IDENTIFIER • '(' ENTER_SCOPE arguments LEAVE_SCOPE ')'
   95 primary_expression: IDENTIFIER •

    ASSIGNMENT  shift, and go to state 78
    '('         shift, and go to state 79

    $default  reduce using rule 95 (primary_expression)


State 32

   96 primary_expression: CONSTANT •

    $default  reduce using rule 96 (primary_expression)


State 33

   97 primary_expression: TRUE •

    $default  reduce using rule 97 (primary_expression)


State 34

   98 primary_expression: FALSE •

    $default  reduce using rule 98 (primary_expression)


State 35

   41 selection_statement: IF • '(' expression ')' compound_statement
   42                    | IF • '(' expression ')' compound_statement ELSE compound_statement

    '('  shift, and go to state 80


State 36

   43 selection_statement: SWITCH • '(' ENTER_SCOPE expression LEAVE_SCOPE ')' '{' case_list '}'

    '('  shift, and go to state 81


State 37

   48 loop_statement: WHILE • '(' ENTER_SCOPE expression LEAVE_SCOPE ')' compound_statement

    '('  shift, and go to state 82


State 38

   49 loop_statement: DO • compound_statement WHILE '(' ENTER_SCOPE expression LEAVE_SCOPE ')' ';'

    '{'  shift, and go to state 8

    compound_statement  go to state 83


State 39

   50 loop_statement: FOR • '(' variable_definition expression_statement ENTER_SCOPE expression LEAVE_SCOPE ')' compound_statement

    '('  shift, and go to state 84


State 40

   51 jump_statement: GOTO • IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 85


State 41

   52 jump_statement: CONTINUE • ';'

    ';'  shift, and go to state 86


State 42

   53 jump_statement: BREAK • ';'

    ';'  shift, and go to state 87


State 43

   54 jump_statement: RETURN • ';'
   55               | RETURN • expression ';'

    IDENTIFIER  shift, and go to state 31
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    ';'         shift, and go to state 88
    '('         shift, and go to state 49

    expression                 go to state 89
    assignment_expression      go to state 61
    logical_or_expression      go to state 62
    logical_and_expression     go to state 63
    inclusive_or_expression    go to state 64
    exclusive_or_expression    go to state 65
    and_expression             go to state 66
    equality_expression        go to state 67
    relational_expression      go to state 68
    shift_expression           go to state 69
    additive_expression        go to state 70
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73


State 44

   93 unary_expression: '!' • unary_expression

    IDENTIFIER  shift, and go to state 90
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    unary_expression    go to state 91
    primary_expression  go to state 73


State 45

   94 unary_expression: '~' • unary_expression

    IDENTIFIER  shift, and go to state 90
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    unary_expression    go to state 92
    primary_expression  go to state 73


State 46

   92 unary_expression: '+' • unary_expression

    IDENTIFIER  shift, and go to state 90
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    unary_expression    go to state 93
    primary_expression  go to state 73


State 47

   91 unary_expression: '-' • unary_expression

    IDENTIFIER  shift, and go to state 90
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    unary_expression    go to state 94
    primary_expression  go to state 73


State 48

   34 expression_statement: ';' •

    $default  reduce using rule 34 (expression_statement)


State 49

   99 primary_expression: '(' • expression ')'

    IDENTIFIER  shift, and go to state 31
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    expression                 go to state 95
    assignment_expression      go to state 61
    logical_or_expression      go to state 62
    logical_and_expression     go to state 63
    inclusive_or_expression    go to state 64
    exclusive_or_expression    go to state 65
    and_expression             go to state 66
    equality_expression        go to state 67
    relational_expression      go to state 68
    shift_expression           go to state 69
    additive_expression        go to state 70
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73


State 50

   31 scope_item: variable_definition •

    $default  reduce using rule 31 (scope_item)


State 51

   19 expression: expression • ',' assignment_expression
   35 expression_statement: expression • ';'

    ';'  shift, and go to state 96
    ','  shift, and go to state 97


State 52

   33 scope_item: function_definition •

    $default  reduce using rule 33 (scope_item)


State 53

   37 statement: compound_statement •

    $default  reduce using rule 37 (statement)


State 54

   27 compound_statement: '{' ENTER_SCOPE_SEMANTIC ENTER_SCOPE scope • LEAVE_SCOPE LEAVE_SCOPE_SEMANTIC '}'
   30 scope: scope • scope_item

    IDENTIFIER  shift, and go to state 31
    CONSTANT    shift, and go to state 32
    INT         shift, and go to state 2
    FLOAT       shift, and go to state 3
    CHAR        shift, and go to state 4
    VOID        shift, and go to state 5
    BOOL        shift, and go to state 6
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    IF          shift, and go to state 35
    SWITCH      shift, and go to state 36
    WHILE       shift, and go to state 37
    DO          shift, and go to state 38
    FOR         shift, and go to state 39
    GOTO        shift, and go to state 40
    CONTINUE    shift, and go to state 41
    BREAK       shift, and go to state 42
    RETURN      shift, and go to state 43
    THABET      shift, and go to state 7
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    ';'         shift, and go to state 48
    '('         shift, and go to state 49
    '{'         shift, and go to state 8

    $default  reduce using rule 102 (LEAVE_SCOPE)

    variable_definition        go to state 50
    type_specifier             go to state 13
    expression                 go to state 51
    function_definition        go to state 52
    compound_statement         go to state 53
    scope_item                 go to state 98
    expression_statement       go to state 56
    statement                  go to state 57
    selection_statement        go to state 58
    loop_statement             go to state 59
    jump_statement             go to state 60
    assignment_expression      go to state 61
    logical_or_expression      go to state 62
    logical_and_expression     go to state 63
    inclusive_or_expression    go to state 64
    exclusive_or_expression    go to state 65
    and_expression             go to state 66
    equality_expression        go to state 67
    relational_expression      go to state 68
    shift_expression           go to state 69
    additive_expression        go to state 70
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73
    LEAVE_SCOPE                go to state 99


State 55

   29 scope: scope_item •

    $default  reduce using rule 29 (scope)


State 56

   36 statement: expression_statement •

    $default  reduce using rule 36 (statement)


State 57

   32 scope_item: statement •

    $default  reduce using rule 32 (scope_item)


State 58

   38 statement: selection_statement •

    $default  reduce using rule 38 (statement)


State 59

   39 statement: loop_statement •

    $default  reduce using rule 39 (statement)


State 60

   40 statement: jump_statement •

    $default  reduce using rule 40 (statement)


State 61

   18 expression: assignment_expression •

    $default  reduce using rule 18 (expression)


State 62

   56 assignment_expression: logical_or_expression •
   63 logical_or_expression: logical_or_expression • OR_OP logical_and_expression

    OR_OP  shift, and go to state 100

    $default  reduce using rule 56 (assignment_expression)


State 63

   62 logical_or_expression: logical_and_expression •
   65 logical_and_expression: logical_and_expression • AND_OP inclusive_or_expression

    AND_OP  shift, and go to state 101

    $default  reduce using rule 62 (logical_or_expression)


State 64

   64 logical_and_expression: inclusive_or_expression •
   67 inclusive_or_expression: inclusive_or_expression • '|' exclusive_or_expression

    '|'  shift, and go to state 102

    $default  reduce using rule 64 (logical_and_expression)


State 65

   66 inclusive_or_expression: exclusive_or_expression •
   69 exclusive_or_expression: exclusive_or_expression • '^' and_expression

    '^'  shift, and go to state 103

    $default  reduce using rule 66 (inclusive_or_expression)


State 66

   68 exclusive_or_expression: and_expression •
   71 and_expression: and_expression • '&' equality_expression

    '&'  shift, and go to state 104

    $default  reduce using rule 68 (exclusive_or_expression)


State 67

   70 and_expression: equality_expression •
   73 equality_expression: equality_expression • EQ_OP relational_expression
   74                    | equality_expression • NE_OP relational_expression

    EQ_OP  shift, and go to state 105
    NE_OP  shift, and go to state 106

    $default  reduce using rule 70 (and_expression)


State 68

   72 equality_expression: relational_expression •
   76 relational_expression: relational_expression • L_OP shift_expression
   77                      | relational_expression • G_OP shift_expression
   78                      | relational_expression • LE_OP shift_expression
   79                      | relational_expression • GE_OP shift_expression

    LE_OP  shift, and go to state 107
    GE_OP  shift, and go to state 108
    L_OP   shift, and go to state 109
    G_OP   shift, and go to state 110

    $default  reduce using rule 72 (equality_expression)


State 69

   75 relational_expression: shift_expression •
   81 shift_expression: shift_expression • LEFT_OP additive_expression
   82                 | shift_expression • RIGHT_OP additive_expression

    LEFT_OP   shift, and go to state 111
    RIGHT_OP  shift, and go to state 112

    $default  reduce using rule 75 (relational_expression)


State 70

   80 shift_expression: additive_expression •
   84 additive_expression: additive_expression • '+' multiplicative_expression
   85                    | additive_expression • '-' multiplicative_expression

    '+'  shift, and go to state 113
    '-'  shift, and go to state 114

    $default  reduce using rule 80 (shift_expression)


State 71

   83 additive_expression: multiplicative_expression •
   87 multiplicative_expression: multiplicative_expression • '*' unary_expression
   88                          | multiplicative_expression • '/' unary_expression
   89                          | multiplicative_expression • '%' unary_expression

    '*'  shift, and go to state 115
    '/'  shift, and go to state 116
    '%'  shift, and go to state 117

    $default  reduce using rule 83 (additive_expression)


State 72

   86 multiplicative_expression: unary_expression •

    $default  reduce using rule 86 (multiplicative_expression)


State 73

   90 unary_expression: primary_expression •

    $default  reduce using rule 90 (unary_expression)


State 74

   21 function_definition: type_specifier IDENTIFIER '(' ENTER_SCOPE • parameters LEAVE_SCOPE $@1 ')' compound_statement

    INT    shift, and go to state 2
    FLOAT  shift, and go to state 3
    CHAR   shift, and go to state 4
    VOID   shift, and go to state 5
    BOOL   shift, and go to state 6

    $default  reduce using rule 23 (parameters)

    type_specifier         go to state 118
    parameters             go to state 119
    parameter_list         go to state 120
    parameter_declaration  go to state 121


State 75

    9 variable_definition: type_specifier identifier_list ASSIGNMENT expression • ';'
   19 expression: expression • ',' assignment_expression

    ';'  shift, and go to state 122
    ','  shift, and go to state 97


State 76

   12 identifier_list: identifier_list ',' IDENTIFIER •

    $default  reduce using rule 12 (identifier_list)


State 77

   10 variable_definition: THABET type_specifier identifier_list ASSIGNMENT expression • ';'
   19 expression: expression • ',' assignment_expression

    ';'  shift, and go to state 123
    ','  shift, and go to state 97


State 78

   57 assignment_expression: IDENTIFIER ASSIGNMENT • assignment_expression

    IDENTIFIER  shift, and go to state 31
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    assignment_expression      go to state 124
    logical_or_expression      go to state 62
    logical_and_expression     go to state 63
    inclusive_or_expression    go to state 64
    exclusive_or_expression    go to state 65
    and_expression             go to state 66
    equality_expression        go to state 67
    relational_expression      go to state 68
    shift_expression           go to state 69
    additive_expression        go to state 70
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73


State 79

   58 assignment_expression: IDENTIFIER '(' • ENTER_SCOPE arguments LEAVE_SCOPE ')'

    $default  reduce using rule 100 (ENTER_SCOPE)

    ENTER_SCOPE  go to state 125


State 80

   41 selection_statement: IF '(' • expression ')' compound_statement
   42                    | IF '(' • expression ')' compound_statement ELSE compound_statement

    IDENTIFIER  shift, and go to state 31
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    expression                 go to state 126
    assignment_expression      go to state 61
    logical_or_expression      go to state 62
    logical_and_expression     go to state 63
    inclusive_or_expression    go to state 64
    exclusive_or_expression    go to state 65
    and_expression             go to state 66
    equality_expression        go to state 67
    relational_expression      go to state 68
    shift_expression           go to state 69
    additive_expression        go to state 70
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73


State 81

   43 selection_statement: SWITCH '(' • ENTER_SCOPE expression LEAVE_SCOPE ')' '{' case_list '}'

    $default  reduce using rule 100 (ENTER_SCOPE)

    ENTER_SCOPE  go to state 127


State 82

   48 loop_statement: WHILE '(' • ENTER_SCOPE expression LEAVE_SCOPE ')' compound_statement

    $default  reduce using rule 100 (ENTER_SCOPE)

    ENTER_SCOPE  go to state 128


State 83

   49 loop_statement: DO compound_statement • WHILE '(' ENTER_SCOPE expression LEAVE_SCOPE ')' ';'

    WHILE  shift, and go to state 129


State 84

   50 loop_statement: FOR '(' • variable_definition expression_statement ENTER_SCOPE expression LEAVE_SCOPE ')' compound_statement

    INT     shift, and go to state 2
    FLOAT   shift, and go to state 3
    CHAR    shift, and go to state 4
    VOID    shift, and go to state 5
    BOOL    shift, and go to state 6
    THABET  shift, and go to state 7

    variable_definition  go to state 130
    type_specifier       go to state 131


State 85

   51 jump_statement: GOTO IDENTIFIER • ';'

    ';'  shift, and go to state 132


State 86

   52 jump_statement: CONTINUE ';' •

    $default  reduce using rule 52 (jump_statement)


State 87

   53 jump_statement: BREAK ';' •

    $default  reduce using rule 53 (jump_statement)


State 88

   54 jump_statement: RETURN ';' •

    $default  reduce using rule 54 (jump_statement)


State 89

   19 expression: expression • ',' assignment_expression
   55 jump_statement: RETURN expression • ';'

    ';'  shift, and go to state 133
    ','  shift, and go to state 97


State 90

   95 primary_expression: IDENTIFIER •

    $default  reduce using rule 95 (primary_expression)


State 91

   93 unary_expression: '!' unary_expression •

    $default  reduce using rule 93 (unary_expression)


State 92

   94 unary_expression: '~' unary_expression •

    $default  reduce using rule 94 (unary_expression)


State 93

   92 unary_expression: '+' unary_expression •

    $default  reduce using rule 92 (unary_expression)


State 94

   91 unary_expression: '-' unary_expression •

    $default  reduce using rule 91 (unary_expression)


State 95

   19 expression: expression • ',' assignment_expression
   99 primary_expression: '(' expression • ')'

    ','  shift, and go to state 97
    ')'  shift, and go to state 134


State 96

   35 expression_statement: expression ';' •

    $default  reduce using rule 35 (expression_statement)


State 97

   19 expression: expression ',' • assignment_expression

    IDENTIFIER  shift, and go to state 31
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    assignment_expression      go to state 135
    logical_or_expression      go to state 62
    logical_and_expression     go to state 63
    inclusive_or_expression    go to state 64
    exclusive_or_expression    go to state 65
    and_expression             go to state 66
    equality_expression        go to state 67
    relational_expression      go to state 68
    shift_expression           go to state 69
    additive_expression        go to state 70
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73


State 98

   30 scope: scope scope_item •

    $default  reduce using rule 30 (scope)


State 99

   27 compound_statement: '{' ENTER_SCOPE_SEMANTIC ENTER_SCOPE scope LEAVE_SCOPE • LEAVE_SCOPE_SEMANTIC '}'

    $default  reduce using rule 103 (LEAVE_SCOPE_SEMANTIC)

    LEAVE_SCOPE_SEMANTIC  go to state 136


State 100

   63 logical_or_expression: logical_or_expression OR_OP • logical_and_expression

    IDENTIFIER  shift, and go to state 90
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    logical_and_expression     go to state 137
    inclusive_or_expression    go to state 64
    exclusive_or_expression    go to state 65
    and_expression             go to state 66
    equality_expression        go to state 67
    relational_expression      go to state 68
    shift_expression           go to state 69
    additive_expression        go to state 70
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73


State 101

   65 logical_and_expression: logical_and_expression AND_OP • inclusive_or_expression

    IDENTIFIER  shift, and go to state 90
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    inclusive_or_expression    go to state 138
    exclusive_or_expression    go to state 65
    and_expression             go to state 66
    equality_expression        go to state 67
    relational_expression      go to state 68
    shift_expression           go to state 69
    additive_expression        go to state 70
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73


State 102

   67 inclusive_or_expression: inclusive_or_expression '|' • exclusive_or_expression

    IDENTIFIER  shift, and go to state 90
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    exclusive_or_expression    go to state 139
    and_expression             go to state 66
    equality_expression        go to state 67
    relational_expression      go to state 68
    shift_expression           go to state 69
    additive_expression        go to state 70
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73


State 103

   69 exclusive_or_expression: exclusive_or_expression '^' • and_expression

    IDENTIFIER  shift, and go to state 90
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    and_expression             go to state 140
    equality_expression        go to state 67
    relational_expression      go to state 68
    shift_expression           go to state 69
    additive_expression        go to state 70
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73


State 104

   71 and_expression: and_expression '&' • equality_expression

    IDENTIFIER  shift, and go to state 90
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    equality_expression        go to state 141
    relational_expression      go to state 68
    shift_expression           go to state 69
    additive_expression        go to state 70
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73


State 105

   73 equality_expression: equality_expression EQ_OP • relational_expression

    IDENTIFIER  shift, and go to state 90
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    relational_expression      go to state 142
    shift_expression           go to state 69
    additive_expression        go to state 70
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73


State 106

   74 equality_expression: equality_expression NE_OP • relational_expression

    IDENTIFIER  shift, and go to state 90
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    relational_expression      go to state 143
    shift_expression           go to state 69
    additive_expression        go to state 70
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73


State 107

   78 relational_expression: relational_expression LE_OP • shift_expression

    IDENTIFIER  shift, and go to state 90
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    shift_expression           go to state 144
    additive_expression        go to state 70
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73


State 108

   79 relational_expression: relational_expression GE_OP • shift_expression

    IDENTIFIER  shift, and go to state 90
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    shift_expression           go to state 145
    additive_expression        go to state 70
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73


State 109

   76 relational_expression: relational_expression L_OP • shift_expression

    IDENTIFIER  shift, and go to state 90
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    shift_expression           go to state 146
    additive_expression        go to state 70
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73


State 110

   77 relational_expression: relational_expression G_OP • shift_expression

    IDENTIFIER  shift, and go to state 90
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    shift_expression           go to state 147
    additive_expression        go to state 70
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73


State 111

   81 shift_expression: shift_expression LEFT_OP • additive_expression

    IDENTIFIER  shift, and go to state 90
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    additive_expression        go to state 148
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73


State 112

   82 shift_expression: shift_expression RIGHT_OP • additive_expression

    IDENTIFIER  shift, and go to state 90
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    additive_expression        go to state 149
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73


State 113

   84 additive_expression: additive_expression '+' • multiplicative_expression

    IDENTIFIER  shift, and go to state 90
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    multiplicative_expression  go to state 150
    unary_expression           go to state 72
    primary_expression         go to state 73


State 114

   85 additive_expression: additive_expression '-' • multiplicative_expression

    IDENTIFIER  shift, and go to state 90
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    multiplicative_expression  go to state 151
    unary_expression           go to state 72
    primary_expression         go to state 73


State 115

   87 multiplicative_expression: multiplicative_expression '*' • unary_expression

    IDENTIFIER  shift, and go to state 90
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    unary_expression    go to state 152
    primary_expression  go to state 73


State 116

   88 multiplicative_expression: multiplicative_expression '/' • unary_expression

    IDENTIFIER  shift, and go to state 90
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    unary_expression    go to state 153
    primary_expression  go to state 73


State 117

   89 multiplicative_expression: multiplicative_expression '%' • unary_expression

    IDENTIFIER  shift, and go to state 90
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    unary_expression    go to state 154
    primary_expression  go to state 73


State 118

   26 parameter_declaration: type_specifier • IDENTIFIER

    IDENTIFIER  shift, and go to state 155


State 119

   21 function_definition: type_specifier IDENTIFIER '(' ENTER_SCOPE parameters • LEAVE_SCOPE $@1 ')' compound_statement

    $default  reduce using rule 102 (LEAVE_SCOPE)

    LEAVE_SCOPE  go to state 156


State 120

   22 parameters: parameter_list •
   25 parameter_list: parameter_list • ',' parameter_declaration

    ','  shift, and go to state 157

    $default  reduce using rule 22 (parameters)


State 121

   24 parameter_list: parameter_declaration •

    $default  reduce using rule 24 (parameter_list)


State 122

    9 variable_definition: type_specifier identifier_list ASSIGNMENT expression ';' •

    $default  reduce using rule 9 (variable_definition)


State 123

   10 variable_definition: THABET type_specifier identifier_list ASSIGNMENT expression ';' •

    $default  reduce using rule 10 (variable_definition)


State 124

   57 assignment_expression: IDENTIFIER ASSIGNMENT assignment_expression •

    $default  reduce using rule 57 (assignment_expression)


State 125

   58 assignment_expression: IDENTIFIER '(' ENTER_SCOPE • arguments LEAVE_SCOPE ')'

    IDENTIFIER  shift, and go to state 90
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '('         shift, and go to state 49

    $default  reduce using rule 61 (arguments)

    arguments           go to state 158
    primary_expression  go to state 159


State 126

   19 expression: expression • ',' assignment_expression
   41 selection_statement: IF '(' expression • ')' compound_statement
   42                    | IF '(' expression • ')' compound_statement ELSE compound_statement

    ','  shift, and go to state 97
    ')'  shift, and go to state 160


State 127

   43 selection_statement: SWITCH '(' ENTER_SCOPE • expression LEAVE_SCOPE ')' '{' case_list '}'

    IDENTIFIER  shift, and go to state 31
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    expression                 go to state 161
    assignment_expression      go to state 61
    logical_or_expression      go to state 62
    logical_and_expression     go to state 63
    inclusive_or_expression    go to state 64
    exclusive_or_expression    go to state 65
    and_expression             go to state 66
    equality_expression        go to state 67
    relational_expression      go to state 68
    shift_expression           go to state 69
    additive_expression        go to state 70
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73


State 128

   48 loop_statement: WHILE '(' ENTER_SCOPE • expression LEAVE_SCOPE ')' compound_statement

    IDENTIFIER  shift, and go to state 31
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    expression                 go to state 162
    assignment_expression      go to state 61
    logical_or_expression      go to state 62
    logical_and_expression     go to state 63
    inclusive_or_expression    go to state 64
    exclusive_or_expression    go to state 65
    and_expression             go to state 66
    equality_expression        go to state 67
    relational_expression      go to state 68
    shift_expression           go to state 69
    additive_expression        go to state 70
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73


State 129

   49 loop_statement: DO compound_statement WHILE • '(' ENTER_SCOPE expression LEAVE_SCOPE ')' ';'

    '('  shift, and go to state 163


State 130

   50 loop_statement: FOR '(' variable_definition • expression_statement ENTER_SCOPE expression LEAVE_SCOPE ')' compound_statement

    IDENTIFIER  shift, and go to state 31
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    ';'         shift, and go to state 48
    '('         shift, and go to state 49

    expression                 go to state 51
    expression_statement       go to state 164
    assignment_expression      go to state 61
    logical_or_expression      go to state 62
    logical_and_expression     go to state 63
    inclusive_or_expression    go to state 64
    exclusive_or_expression    go to state 65
    and_expression             go to state 66
    equality_expression        go to state 67
    relational_expression      go to state 68
    shift_expression           go to state 69
    additive_expression        go to state 70
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73


State 131

    8 variable_definition: type_specifier • identifier_list ';'
    9                    | type_specifier • identifier_list ASSIGNMENT expression ';'

    IDENTIFIER  shift, and go to state 23

    identifier_list  go to state 22


State 132

   51 jump_statement: GOTO IDENTIFIER ';' •

    $default  reduce using rule 51 (jump_statement)


State 133

   55 jump_statement: RETURN expression ';' •

    $default  reduce using rule 55 (jump_statement)


State 134

   99 primary_expression: '(' expression ')' •

    $default  reduce using rule 99 (primary_expression)


State 135

   19 expression: expression ',' assignment_expression •

    $default  reduce using rule 19 (expression)


State 136

   27 compound_statement: '{' ENTER_SCOPE_SEMANTIC ENTER_SCOPE scope LEAVE_SCOPE LEAVE_SCOPE_SEMANTIC • '}'

    '}'  shift, and go to state 165


State 137

   63 logical_or_expression: logical_or_expression OR_OP logical_and_expression •
   65 logical_and_expression: logical_and_expression • AND_OP inclusive_or_expression

    AND_OP  shift, and go to state 101

    $default  reduce using rule 63 (logical_or_expression)


State 138

   65 logical_and_expression: logical_and_expression AND_OP inclusive_or_expression •
   67 inclusive_or_expression: inclusive_or_expression • '|' exclusive_or_expression

    '|'  shift, and go to state 102

    $default  reduce using rule 65 (logical_and_expression)


State 139

   67 inclusive_or_expression: inclusive_or_expression '|' exclusive_or_expression •
   69 exclusive_or_expression: exclusive_or_expression • '^' and_expression

    '^'  shift, and go to state 103

    $default  reduce using rule 67 (inclusive_or_expression)


State 140

   69 exclusive_or_expression: exclusive_or_expression '^' and_expression •
   71 and_expression: and_expression • '&' equality_expression

    '&'  shift, and go to state 104

    $default  reduce using rule 69 (exclusive_or_expression)


State 141

   71 and_expression: and_expression '&' equality_expression •
   73 equality_expression: equality_expression • EQ_OP relational_expression
   74                    | equality_expression • NE_OP relational_expression

    EQ_OP  shift, and go to state 105
    NE_OP  shift, and go to state 106

    $default  reduce using rule 71 (and_expression)


State 142

   73 equality_expression: equality_expression EQ_OP relational_expression •
   76 relational_expression: relational_expression • L_OP shift_expression
   77                      | relational_expression • G_OP shift_expression
   78                      | relational_expression • LE_OP shift_expression
   79                      | relational_expression • GE_OP shift_expression

    LE_OP  shift, and go to state 107
    GE_OP  shift, and go to state 108
    L_OP   shift, and go to state 109
    G_OP   shift, and go to state 110

    $default  reduce using rule 73 (equality_expression)


State 143

   74 equality_expression: equality_expression NE_OP relational_expression •
   76 relational_expression: relational_expression • L_OP shift_expression
   77                      | relational_expression • G_OP shift_expression
   78                      | relational_expression • LE_OP shift_expression
   79                      | relational_expression • GE_OP shift_expression

    LE_OP  shift, and go to state 107
    GE_OP  shift, and go to state 108
    L_OP   shift, and go to state 109
    G_OP   shift, and go to state 110

    $default  reduce using rule 74 (equality_expression)


State 144

   78 relational_expression: relational_expression LE_OP shift_expression •
   81 shift_expression: shift_expression • LEFT_OP additive_expression
   82                 | shift_expression • RIGHT_OP additive_expression

    LEFT_OP   shift, and go to state 111
    RIGHT_OP  shift, and go to state 112

    $default  reduce using rule 78 (relational_expression)


State 145

   79 relational_expression: relational_expression GE_OP shift_expression •
   81 shift_expression: shift_expression • LEFT_OP additive_expression
   82                 | shift_expression • RIGHT_OP additive_expression

    LEFT_OP   shift, and go to state 111
    RIGHT_OP  shift, and go to state 112

    $default  reduce using rule 79 (relational_expression)


State 146

   76 relational_expression: relational_expression L_OP shift_expression •
   81 shift_expression: shift_expression • LEFT_OP additive_expression
   82                 | shift_expression • RIGHT_OP additive_expression

    LEFT_OP   shift, and go to state 111
    RIGHT_OP  shift, and go to state 112

    $default  reduce using rule 76 (relational_expression)


State 147

   77 relational_expression: relational_expression G_OP shift_expression •
   81 shift_expression: shift_expression • LEFT_OP additive_expression
   82                 | shift_expression • RIGHT_OP additive_expression

    LEFT_OP   shift, and go to state 111
    RIGHT_OP  shift, and go to state 112

    $default  reduce using rule 77 (relational_expression)


State 148

   81 shift_expression: shift_expression LEFT_OP additive_expression •
   84 additive_expression: additive_expression • '+' multiplicative_expression
   85                    | additive_expression • '-' multiplicative_expression

    '+'  shift, and go to state 113
    '-'  shift, and go to state 114

    $default  reduce using rule 81 (shift_expression)


State 149

   82 shift_expression: shift_expression RIGHT_OP additive_expression •
   84 additive_expression: additive_expression • '+' multiplicative_expression
   85                    | additive_expression • '-' multiplicative_expression

    '+'  shift, and go to state 113
    '-'  shift, and go to state 114

    $default  reduce using rule 82 (shift_expression)


State 150

   84 additive_expression: additive_expression '+' multiplicative_expression •
   87 multiplicative_expression: multiplicative_expression • '*' unary_expression
   88                          | multiplicative_expression • '/' unary_expression
   89                          | multiplicative_expression • '%' unary_expression

    '*'  shift, and go to state 115
    '/'  shift, and go to state 116
    '%'  shift, and go to state 117

    $default  reduce using rule 84 (additive_expression)


State 151

   85 additive_expression: additive_expression '-' multiplicative_expression •
   87 multiplicative_expression: multiplicative_expression • '*' unary_expression
   88                          | multiplicative_expression • '/' unary_expression
   89                          | multiplicative_expression • '%' unary_expression

    '*'  shift, and go to state 115
    '/'  shift, and go to state 116
    '%'  shift, and go to state 117

    $default  reduce using rule 85 (additive_expression)


State 152

   87 multiplicative_expression: multiplicative_expression '*' unary_expression •

    $default  reduce using rule 87 (multiplicative_expression)


State 153

   88 multiplicative_expression: multiplicative_expression '/' unary_expression •

    $default  reduce using rule 88 (multiplicative_expression)


State 154

   89 multiplicative_expression: multiplicative_expression '%' unary_expression •

    $default  reduce using rule 89 (multiplicative_expression)


State 155

   26 parameter_declaration: type_specifier IDENTIFIER •

    $default  reduce using rule 26 (parameter_declaration)


State 156

   21 function_definition: type_specifier IDENTIFIER '(' ENTER_SCOPE parameters LEAVE_SCOPE • $@1 ')' compound_statement

    $default  reduce using rule 20 ($@1)

    $@1  go to state 166


State 157

   25 parameter_list: parameter_list ',' • parameter_declaration

    INT    shift, and go to state 2
    FLOAT  shift, and go to state 3
    CHAR   shift, and go to state 4
    VOID   shift, and go to state 5
    BOOL   shift, and go to state 6

    type_specifier         go to state 118
    parameter_declaration  go to state 167


State 158

   58 assignment_expression: IDENTIFIER '(' ENTER_SCOPE arguments • LEAVE_SCOPE ')'
   60 arguments: arguments • ',' primary_expression

    ','  shift, and go to state 168

    $default  reduce using rule 102 (LEAVE_SCOPE)

    LEAVE_SCOPE  go to state 169


State 159

   59 arguments: primary_expression •

    $default  reduce using rule 59 (arguments)


State 160

   41 selection_statement: IF '(' expression ')' • compound_statement
   42                    | IF '(' expression ')' • compound_statement ELSE compound_statement

    '{'  shift, and go to state 8

    compound_statement  go to state 170


State 161

   19 expression: expression • ',' assignment_expression
   43 selection_statement: SWITCH '(' ENTER_SCOPE expression • LEAVE_SCOPE ')' '{' case_list '}'

    ','  shift, and go to state 97

    $default  reduce using rule 102 (LEAVE_SCOPE)

    LEAVE_SCOPE  go to state 171


State 162

   19 expression: expression • ',' assignment_expression
   48 loop_statement: WHILE '(' ENTER_SCOPE expression • LEAVE_SCOPE ')' compound_statement

    ','  shift, and go to state 97

    $default  reduce using rule 102 (LEAVE_SCOPE)

    LEAVE_SCOPE  go to state 172


State 163

   49 loop_statement: DO compound_statement WHILE '(' • ENTER_SCOPE expression LEAVE_SCOPE ')' ';'

    $default  reduce using rule 100 (ENTER_SCOPE)

    ENTER_SCOPE  go to state 173


State 164

   50 loop_statement: FOR '(' variable_definition expression_statement • ENTER_SCOPE expression LEAVE_SCOPE ')' compound_statement

    $default  reduce using rule 100 (ENTER_SCOPE)

    ENTER_SCOPE  go to state 174


State 165

   27 compound_statement: '{' ENTER_SCOPE_SEMANTIC ENTER_SCOPE scope LEAVE_SCOPE LEAVE_SCOPE_SEMANTIC '}' •

    $default  reduce using rule 27 (compound_statement)


State 166

   21 function_definition: type_specifier IDENTIFIER '(' ENTER_SCOPE parameters LEAVE_SCOPE $@1 • ')' compound_statement

    ')'  shift, and go to state 175


State 167

   25 parameter_list: parameter_list ',' parameter_declaration •

    $default  reduce using rule 25 (parameter_list)


State 168

   60 arguments: arguments ',' • primary_expression

    IDENTIFIER  shift, and go to state 90
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '('         shift, and go to state 49

    primary_expression  go to state 176


State 169

   58 assignment_expression: IDENTIFIER '(' ENTER_SCOPE arguments LEAVE_SCOPE • ')'

    ')'  shift, and go to state 177


State 170

   41 selection_statement: IF '(' expression ')' compound_statement •
   42                    | IF '(' expression ')' compound_statement • ELSE compound_statement

    ELSE  shift, and go to state 178

    $default  reduce using rule 41 (selection_statement)


State 171

   43 selection_statement: SWITCH '(' ENTER_SCOPE expression LEAVE_SCOPE • ')' '{' case_list '}'

    ')'  shift, and go to state 179


State 172

   48 loop_statement: WHILE '(' ENTER_SCOPE expression LEAVE_SCOPE • ')' compound_statement

    ')'  shift, and go to state 180


State 173

   49 loop_statement: DO compound_statement WHILE '(' ENTER_SCOPE • expression LEAVE_SCOPE ')' ';'

    IDENTIFIER  shift, and go to state 31
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    expression                 go to state 181
    assignment_expression      go to state 61
    logical_or_expression      go to state 62
    logical_and_expression     go to state 63
    inclusive_or_expression    go to state 64
    exclusive_or_expression    go to state 65
    and_expression             go to state 66
    equality_expression        go to state 67
    relational_expression      go to state 68
    shift_expression           go to state 69
    additive_expression        go to state 70
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73


State 174

   50 loop_statement: FOR '(' variable_definition expression_statement ENTER_SCOPE • expression LEAVE_SCOPE ')' compound_statement

    IDENTIFIER  shift, and go to state 31
    CONSTANT    shift, and go to state 32
    TRUE        shift, and go to state 33
    FALSE       shift, and go to state 34
    '!'         shift, and go to state 44
    '~'         shift, and go to state 45
    '+'         shift, and go to state 46
    '-'         shift, and go to state 47
    '('         shift, and go to state 49

    expression                 go to state 182
    assignment_expression      go to state 61
    logical_or_expression      go to state 62
    logical_and_expression     go to state 63
    inclusive_or_expression    go to state 64
    exclusive_or_expression    go to state 65
    and_expression             go to state 66
    equality_expression        go to state 67
    relational_expression      go to state 68
    shift_expression           go to state 69
    additive_expression        go to state 70
    multiplicative_expression  go to state 71
    unary_expression           go to state 72
    primary_expression         go to state 73


State 175

   21 function_definition: type_specifier IDENTIFIER '(' ENTER_SCOPE parameters LEAVE_SCOPE $@1 ')' • compound_statement

    '{'  shift, and go to state 8

    compound_statement  go to state 183


State 176

   60 arguments: arguments ',' primary_expression •

    $default  reduce using rule 60 (arguments)


State 177

   58 assignment_expression: IDENTIFIER '(' ENTER_SCOPE arguments LEAVE_SCOPE ')' •

    $default  reduce using rule 58 (assignment_expression)


State 178

   42 selection_statement: IF '(' expression ')' compound_statement ELSE • compound_statement

    '{'  shift, and go to state 8

    compound_statement  go to state 184


State 179

   43 selection_statement: SWITCH '(' ENTER_SCOPE expression LEAVE_SCOPE ')' • '{' case_list '}'

    '{'  shift, and go to state 185


State 180

   48 loop_statement: WHILE '(' ENTER_SCOPE expression LEAVE_SCOPE ')' • compound_statement

    '{'  shift, and go to state 8

    compound_statement  go to state 186


State 181

   19 expression: expression • ',' assignment_expression
   49 loop_statement: DO compound_statement WHILE '(' ENTER_SCOPE expression • LEAVE_SCOPE ')' ';'

    ','  shift, and go to state 97

    $default  reduce using rule 102 (LEAVE_SCOPE)

    LEAVE_SCOPE  go to state 187


State 182

   19 expression: expression • ',' assignment_expression
   50 loop_statement: FOR '(' variable_definition expression_statement ENTER_SCOPE expression • LEAVE_SCOPE ')' compound_statement

    ','  shift, and go to state 97

    $default  reduce using rule 102 (LEAVE_SCOPE)

    LEAVE_SCOPE  go to state 188


State 183

   21 function_definition: type_specifier IDENTIFIER '(' ENTER_SCOPE parameters LEAVE_SCOPE $@1 ')' compound_statement •

    $default  reduce using rule 21 (function_definition)


State 184

   42 selection_statement: IF '(' expression ')' compound_statement ELSE compound_statement •

    $default  reduce using rule 42 (selection_statement)


State 185

   43 selection_statement: SWITCH '(' ENTER_SCOPE expression LEAVE_SCOPE ')' '{' • case_list '}'

    $default  reduce using rule 100 (ENTER_SCOPE)

    case_list    go to state 189
    ENTER_SCOPE  go to state 190


State 186

   48 loop_statement: WHILE '(' ENTER_SCOPE expression LEAVE_SCOPE ')' compound_statement •

    $default  reduce using rule 48 (loop_statement)


State 187

   49 loop_statement: DO compound_statement WHILE '(' ENTER_SCOPE expression LEAVE_SCOPE • ')' ';'

    ')'  shift, and go to state 191


State 188

   50 loop_statement: FOR '(' variable_definition expression_statement ENTER_SCOPE expression LEAVE_SCOPE • ')' compound_statement

    ')'  shift, and go to state 192


State 189

   43 selection_statement: SWITCH '(' ENTER_SCOPE expression LEAVE_SCOPE ')' '{' case_list • '}'
   45 case_list: case_list • ENTER_SCOPE case_item LEAVE_SCOPE

    '}'  shift, and go to state 193

    $default  reduce using rule 100 (ENTER_SCOPE)

    ENTER_SCOPE  go to state 194


State 190

   44 case_list: ENTER_SCOPE • case_item LEAVE_SCOPE

    CASE     shift, and go to state 195
    DEFAULT  shift, and go to state 196

    case_item  go to state 197


State 191

   49 loop_statement: DO compound_statement WHILE '(' ENTER_SCOPE expression LEAVE_SCOPE ')' • ';'

    ';'  shift, and go to state 198


State 192

   50 loop_statement: FOR '(' variable_definition expression_statement ENTER_SCOPE expression LEAVE_SCOPE ')' • compound_statement

    '{'  shift, and go to state 8

    compound_statement  go to state 199


State 193

   43 selection_statement: SWITCH '(' ENTER_SCOPE expression LEAVE_SCOPE ')' '{' case_list '}' •

    $default  reduce using rule 43 (selection_statement)


State 194

   45 case_list: case_list ENTER_SCOPE • case_item LEAVE_SCOPE

    CASE     shift, and go to state 195
    DEFAULT  shift, and go to state 196

    case_item  go to state 200


State 195

   46 case_item: CASE • CONSTANT ':' compound_statement

    CONSTANT  shift, and go to state 201


State 196

   47 case_item: DEFAULT • ':' compound_statement

    ':'  shift, and go to state 202


State 197

   44 case_list: ENTER_SCOPE case_item • LEAVE_SCOPE

    $default  reduce using rule 102 (LEAVE_SCOPE)

    LEAVE_SCOPE  go to state 203


State 198

   49 loop_statement: DO compound_statement WHILE '(' ENTER_SCOPE expression LEAVE_SCOPE ')' ';' •

    $default  reduce using rule 49 (loop_statement)


State 199

   50 loop_statement: FOR '(' variable_definition expression_statement ENTER_SCOPE expression LEAVE_SCOPE ')' compound_statement •

    $default  reduce using rule 50 (loop_statement)


State 200

   45 case_list: case_list ENTER_SCOPE case_item • LEAVE_SCOPE

    $default  reduce using rule 102 (LEAVE_SCOPE)

    LEAVE_SCOPE  go to state 204


State 201

   46 case_item: CASE CONSTANT • ':' compound_statement

    ':'  shift, and go to state 205


State 202

   47 case_item: DEFAULT ':' • compound_statement

    '{'  shift, and go to state 8

    compound_statement  go to state 206


State 203

   44 case_list: ENTER_SCOPE case_item LEAVE_SCOPE •

    $default  reduce using rule 44 (case_list)


State 204

   45 case_list: case_list ENTER_SCOPE case_item LEAVE_SCOPE •

    $default  reduce using rule 45 (case_list)


State 205

   46 case_item: CASE CONSTANT ':' • compound_statement

    '{'  shift, and go to state 8

    compound_statement  go to state 207


State 206

   47 case_item: DEFAULT ':' compound_statement •

    $default  reduce using rule 47 (case_item)


State 207

   46 case_item: CASE CONSTANT ':' compound_statement •

    $default  reduce using rule 46 (case_item)
